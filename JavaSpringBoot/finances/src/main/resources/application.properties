spring.application.name=finances

# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/financetest
spring.datasource.username=megas
spring.datasource.password=megas
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.port=5000
spring.jpa.show-sql=true

# Optional Hibernate/JPA settings
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.main.web-application-type=none
#spring.thymeleaf.enabled=false
#logging.level.org.springframework.web=OFF
#spring.devtools.restart.enabled=false
#spring.devtools.livereload.enabled=false
logging.level.root=ERROR


# HikariCP Settings
spring.datasource.hikari.maximum-pool-size=5       
# Max number of connections in the pool
# Higher value: Allows more concurrent queries but uses more database resources.
# Lower value: Limits concurrency but conserves resources (good for single-user apps).

spring.datasource.hikari.minimum-idle=1            
# Minimum number of idle connections in the pool
# Higher value: Ensures connections are pre-warmed and ready for spikes in usage.
# Lower value: Reduces memory and resource usage, but connections may need to be created on demand.

spring.datasource.hikari.idle-timeout=60000        
# Max time (ms) an idle connection stays in the pool before being removed
# Higher value: Keeps connections idle longer, which is good for sporadic queries.
# Lower value: Removes idle connections sooner, freeing resources in low-usage apps.

spring.datasource.hikari.max-lifetime=1800000      
# Max lifetime (ms) of a connection before itâ€™s closed and replaced
# Higher value: Connections live longer, reducing the cost of creating new ones.
# Lower value: Recycles connections more often, helpful if connections degrade over time.

spring.datasource.hikari.connection-timeout=30000  
# Max time (ms) to wait for a connection from the pool
# Higher value: Prevents timeout errors under heavy load but delays user response.
# Lower value: Fails faster when no connections are available, better for debugging issues.

spring.datasource.hikari.validation-timeout=5000   
# Max time (ms) to validate a connection
# Higher value: Allows more time for slower validations but can increase latency.
# Lower value: Faster validation but risks marking healthy connections as invalid.

spring.datasource.hikari.leak-detection-threshold=20000
# Enables detection of connections not returned to the pool within the given time (ms).
# Higher value: Only detects leaks during long-running queries or operations.
# Lower value: Detects shorter delays, good for identifying issues during development.
